"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
const app = require(".");
class Core {
    constructor(address, channel) {
        this.address = address;
        this.channel = channel;
        this.entityList = new app.EntityList(this.address + app.coreOffsets.clEntityList, this.channel);
        this.levelName = new app.LevelName(this.address + app.coreOffsets.levelName);
        this.localPlayer = new app.LocalPlayer(this.address + app.coreOffsets.localPlayer);
        this.channel.create(this.entityList);
        this.channel.create(this.levelName);
        this.channel.create(this.localPlayer);
    }
    static async createAsync(server) {
        const processes = await server.processesAsync();
        const targetProcess = processes.find(x => x.command.toLowerCase().endsWith('r5apex.exe'));
        if (!targetProcess)
            throw new Error('Invalid process!');
        const regions = await targetProcess.regionsAsync();
        const targetRegion = regions.find(x => x.pathname.toLowerCase().endsWith('r5apex.exe'))
            ?? regions.find(x => x.perms == 1 && x.pathname.startsWith('/memfd'))
            ?? regions.find(x => x.start === BigInt(0x140000000));
        if (!targetRegion)
            throw new Error('Invalid region!');
        return new Core(targetRegion.start, new app.api.Channel(targetProcess.pid));
    }
    async runAsync(renderFrame) {
        await this.channel.runAsync(renderFrame);
    }
}
exports.Core = Core;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29yZS9Db3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUV6QixNQUFhLElBQUk7SUFLZixZQUNtQixPQUFlLEVBQ2YsT0FBd0I7UUFEeEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBTmxDLGVBQVUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0YsY0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBS3JGLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFzQjtRQUM3QyxNQUFNLFNBQVMsR0FBRyxNQUFNLE1BQU0sQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNoRCxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUMxRixJQUFJLENBQUMsYUFBYTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN4RCxNQUFNLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNuRCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7ZUFDbEYsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2VBQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxZQUFZO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQXVCO1FBQ3BDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNGO0FBNUJELG9CQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3JlIHtcclxuICByZWFkb25seSBlbnRpdHlMaXN0ID0gbmV3IGFwcC5FbnRpdHlMaXN0KHRoaXMuYWRkcmVzcyArIGFwcC5jb3JlT2Zmc2V0cy5jbEVudGl0eUxpc3QsIHRoaXMuY2hhbm5lbCk7XHJcbiAgcmVhZG9ubHkgbGV2ZWxOYW1lID0gbmV3IGFwcC5MZXZlbE5hbWUodGhpcy5hZGRyZXNzICsgYXBwLmNvcmVPZmZzZXRzLmxldmVsTmFtZSk7XHJcbiAgcmVhZG9ubHkgbG9jYWxQbGF5ZXIgPSBuZXcgYXBwLkxvY2FsUGxheWVyKHRoaXMuYWRkcmVzcyArIGFwcC5jb3JlT2Zmc2V0cy5sb2NhbFBsYXllcik7XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFkZHJlc3M6IGJpZ2ludCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hhbm5lbDogYXBwLmFwaS5DaGFubmVsKSB7XHJcbiAgICB0aGlzLmNoYW5uZWwuY3JlYXRlKHRoaXMuZW50aXR5TGlzdCk7XHJcbiAgICB0aGlzLmNoYW5uZWwuY3JlYXRlKHRoaXMubGV2ZWxOYW1lKTtcclxuICAgIHRoaXMuY2hhbm5lbC5jcmVhdGUodGhpcy5sb2NhbFBsYXllcik7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgY3JlYXRlQXN5bmMoc2VydmVyOiBhcHAuYXBpLlNlcnZlcikge1xyXG4gICAgY29uc3QgcHJvY2Vzc2VzID0gYXdhaXQgc2VydmVyLnByb2Nlc3Nlc0FzeW5jKCk7XHJcbiAgICBjb25zdCB0YXJnZXRQcm9jZXNzID0gcHJvY2Vzc2VzLmZpbmQoeCA9PiB4LmNvbW1hbmQudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgncjVhcGV4LmV4ZScpKTtcclxuICAgIGlmICghdGFyZ2V0UHJvY2VzcykgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHByb2Nlc3MhJyk7XHJcbiAgICBjb25zdCByZWdpb25zID0gYXdhaXQgdGFyZ2V0UHJvY2Vzcy5yZWdpb25zQXN5bmMoKTtcclxuICAgIGNvbnN0IHRhcmdldFJlZ2lvbiA9IHJlZ2lvbnMuZmluZCh4ID0+IHgucGF0aG5hbWUudG9Mb3dlckNhc2UoKS5lbmRzV2l0aCgncjVhcGV4LmV4ZScpKVxyXG4gICAgICA/PyByZWdpb25zLmZpbmQoeCA9PiB4LnBlcm1zID09IDEgJiYgeC5wYXRobmFtZS5zdGFydHNXaXRoKCcvbWVtZmQnKSlcclxuICAgICAgPz8gcmVnaW9ucy5maW5kKHggPT4geC5zdGFydCA9PT0gQmlnSW50KDB4MTQwMDAwMDAwKSk7XHJcbiAgICBpZiAoIXRhcmdldFJlZ2lvbikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZ2lvbiEnKTtcclxuICAgIHJldHVybiBuZXcgQ29yZSh0YXJnZXRSZWdpb24uc3RhcnQsIG5ldyBhcHAuYXBpLkNoYW5uZWwodGFyZ2V0UHJvY2Vzcy5waWQpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHJ1bkFzeW5jKHJlbmRlckZyYW1lOiAoKSA9PiB2b2lkKSB7XHJcbiAgICBhd2FpdCB0aGlzLmNoYW5uZWwucnVuQXN5bmMocmVuZGVyRnJhbWUpO1xyXG4gIH1cclxufVxyXG4iXX0=