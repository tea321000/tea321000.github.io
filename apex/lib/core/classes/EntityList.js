"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityList = void 0;
const app = require("..");
const maxEntities = Array(60).fill(0).map((_, i) => i);
class EntityList extends app.api.Adapter {
    constructor(address, channel, pointers = maxEntities.map(x => new app.UInt64(x << 5, 1000))) {
        super(new app.api.Entity(address, pointers));
        this.channel = channel;
        this.pointers = pointers;
        this.players = {};
        this.source.emitter.addEventListener('postReceive', this.onPostReceive.bind(this));
    }
    get value() {
        return Object.values(this.players).filter(x => x.isValid);
    }
    handleCreates(addresses) {
        for (const x of addresses) {
            const key = x.toString(16);
            if (!this.players[key]) {
                const player = new app.Player(x);
                this.players[key] = player;
                this.channel.create(player);
            }
        }
    }
    handleDeletes(addresses) {
        for (const x of addresses) {
            const key = x.toString(16);
            if (this.players[key]) {
                this.channel.delete(this.players[key]);
                delete this.players[key];
            }
        }
    }
    onPostReceive() {
        const addresses = this.pointers
            .map(x => x.value)
            .filter(Boolean);
        this.handleCreates(addresses
            .filter(x => !this.players[x.toString(16)]));
        this.handleDeletes(Object.keys(this.players)
            .map(x => BigInt(`0x${x}`))
            .filter(x => !addresses.includes(x)));
    }
}
exports.EntityList = EntityList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5TGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29yZS9jbGFzc2VzL0VudGl0eUxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEJBQTBCO0FBQzFCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFdkQsTUFBYSxVQUFXLFNBQVEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUF1QjtJQUc3RCxZQUFZLE9BQWUsRUFDUixPQUF3QixFQUN4QixXQUFXLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RSxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUY1QixZQUFPLEdBQVAsT0FBTyxDQUFpQjtRQUN4QixhQUFRLEdBQVIsUUFBUSxDQUFxRDtRQUovRCxZQUFPLEdBQStCLEVBQUUsQ0FBQztRQU14RCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVPLGFBQWEsQ0FBQyxTQUF3QjtRQUM1QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLFNBQVMsRUFBRTtZQUN6QixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO2dCQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3QjtTQUNGO0lBQ0gsQ0FBQztJQUVPLGFBQWEsQ0FBQyxTQUF3QjtRQUM1QyxLQUFLLE1BQU0sQ0FBQyxJQUFJLFNBQVMsRUFBRTtZQUN6QixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN2QyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7U0FDRjtJQUNILENBQUM7SUFFTyxhQUFhO1FBQ25CLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRO2FBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7YUFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25CLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUzthQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN6QyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzFCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBN0NELGdDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuLic7XHJcbmNvbnN0IG1heEVudGl0aWVzID0gQXJyYXkoNjApLmZpbGwoMCkubWFwKChfLCBpKSA9PiBpKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlMaXN0IGV4dGVuZHMgYXBwLmFwaS5BZGFwdGVyPGFwcC5hcGkuRW50aXR5PiB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBwbGF5ZXJzOiBSZWNvcmQ8c3RyaW5nLCBhcHAuUGxheWVyPiA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcihhZGRyZXNzOiBiaWdpbnQsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoYW5uZWw6IGFwcC5hcGkuQ2hhbm5lbCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcG9pbnRlcnMgPSBtYXhFbnRpdGllcy5tYXAoeCA9PiBuZXcgYXBwLlVJbnQ2NCh4IDw8IDUsIDEwMDApKSkge1xyXG4gICAgc3VwZXIobmV3IGFwcC5hcGkuRW50aXR5KGFkZHJlc3MsIHBvaW50ZXJzKSk7XHJcbiAgICB0aGlzLnNvdXJjZS5lbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3Bvc3RSZWNlaXZlJywgdGhpcy5vblBvc3RSZWNlaXZlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHZhbHVlKCkge1xyXG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5wbGF5ZXJzKS5maWx0ZXIoeCA9PiB4LmlzVmFsaWQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVDcmVhdGVzKGFkZHJlc3NlczogQXJyYXk8YmlnaW50Pikge1xyXG4gICAgZm9yIChjb25zdCB4IG9mIGFkZHJlc3Nlcykge1xyXG4gICAgICBjb25zdCBrZXkgPSB4LnRvU3RyaW5nKDE2KTtcclxuICAgICAgaWYgKCF0aGlzLnBsYXllcnNba2V5XSkge1xyXG4gICAgICAgIGNvbnN0IHBsYXllciA9IG5ldyBhcHAuUGxheWVyKHgpO1xyXG4gICAgICAgIHRoaXMucGxheWVyc1trZXldID0gcGxheWVyO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbC5jcmVhdGUocGxheWVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVEZWxldGVzKGFkZHJlc3NlczogQXJyYXk8YmlnaW50Pikge1xyXG4gICAgZm9yIChjb25zdCB4IG9mIGFkZHJlc3Nlcykge1xyXG4gICAgICBjb25zdCBrZXkgPSB4LnRvU3RyaW5nKDE2KTtcclxuICAgICAgaWYgKHRoaXMucGxheWVyc1trZXldKSB7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLmRlbGV0ZSh0aGlzLnBsYXllcnNba2V5XSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMucGxheWVyc1trZXldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9uUG9zdFJlY2VpdmUoKSB7XHJcbiAgICBjb25zdCBhZGRyZXNzZXMgPSB0aGlzLnBvaW50ZXJzXHJcbiAgICAgIC5tYXAoeCA9PiB4LnZhbHVlKVxyXG4gICAgICAuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgdGhpcy5oYW5kbGVDcmVhdGVzKGFkZHJlc3Nlc1xyXG4gICAgICAuZmlsdGVyKHggPT4gIXRoaXMucGxheWVyc1t4LnRvU3RyaW5nKDE2KV0pKTtcclxuICAgIHRoaXMuaGFuZGxlRGVsZXRlcyhPYmplY3Qua2V5cyh0aGlzLnBsYXllcnMpXHJcbiAgICAgIC5tYXAoeCA9PiBCaWdJbnQoYDB4JHt4fWApKVxyXG4gICAgICAuZmlsdGVyKHggPT4gIWFkZHJlc3Nlcy5pbmNsdWRlcyh4KSkpO1xyXG4gIH1cclxufVxyXG4iXX0=