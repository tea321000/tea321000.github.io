"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aimbot = void 0;
class Aimbot {
    updateStates(levelName, localPlayer, players) {
        if (localPlayer.bleedoutState.value)
            return;
        const closestEnemyPlayer = (levelName == "mp_rr_canyonlands_staging") ? this.createDummyPLayer() : this.findClosestEnemyPlayer(localPlayer, players);
        if (closestEnemyPlayer == null)
            return;
        const enemyDistance = this.calcDistance(localPlayer, closestEnemyPlayer);
        let maxAngleDeltaRange;
        let smoothingDivisor;
        if (enemyDistance <= 200) { //200-400 is pretty much only close range
            maxAngleDeltaRange = 50;
            smoothingDivisor = 1;
        }
        else if (enemyDistance <= 400) {
            maxAngleDeltaRange = 10;
            smoothingDivisor = 4;
        }
        else
            return; //no aimbot past 400
        const newViewAnglesStats = this.createNewViewingAnglesStats(localPlayer, closestEnemyPlayer, smoothingDivisor);
        if (newViewAnglesStats.yawDeltaAbs > maxAngleDeltaRange)
            return;
        if (newViewAnglesStats.pitchDeltaAbs > maxAngleDeltaRange)
            return;
        this.writeNewViewingAngles(localPlayer, newViewAnglesStats);
    }
    writeNewViewingAngles(localPlayer, newViewAnglesStats) {
        let newViewAnglesValues = localPlayer.viewAngles.value;
        newViewAnglesValues.y -= newViewAnglesStats.yawDeltaSmoothed;
        newViewAnglesValues.x -= newViewAnglesStats.pitchDeltaSmoothed;
        localPlayer.viewAngles.value = newViewAnglesValues; // cause update event
    }
    createNewViewingAnglesStats(localPlayer, closestEnemyPlayer, smoothingDivisor) {
        const newViewingAngles = this.calcViewAnglesToTarget(localPlayer, closestEnemyPlayer);
        const currentYaw = localPlayer.viewAngles.value.y;
        const desiredYaw = newViewingAngles.yaw;
        const yawDelta = this.calcYawDeltaAndFlipIfNeeded(currentYaw, desiredYaw);
        const yawDeltaAbs = Math.abs(yawDelta);
        const yawDeltaSmoothed = yawDelta / smoothingDivisor;
        const flipYaw = localPlayer.localOrigin.value.y < closestEnemyPlayer.localOrigin.value.y;
        const currentPitch = localPlayer.viewAngles.value.x;
        const desiredPitch = newViewingAngles.pitch;
        const pitchDelta = currentPitch - desiredPitch;
        const pitchDeltaAbs = Math.abs(pitchDelta);
        const pitchDeltaSmoothed = pitchDelta / smoothingDivisor;
        return {
            currentYaw: currentYaw,
            desiredYaw: desiredYaw,
            yawDelta: yawDelta,
            yawDeltaAbs: yawDeltaAbs,
            yawDeltaSmoothed: yawDeltaSmoothed,
            flipYaw: flipYaw,
            currentPitch: currentPitch,
            desiredPitch: desiredPitch,
            pitchDelta: pitchDelta,
            pitchDeltaAbs: pitchDeltaAbs,
            pitchDeltaSmoothed: pitchDeltaSmoothed,
        };
    }
    calcYawDeltaAndFlipIfNeeded(currentYaw, desiredYaw) {
        let delta = currentYaw - desiredYaw;
        if (Math.abs(delta) > 180) {
            if (currentYaw > 0 && desiredYaw < 0)
                delta -= 360;
            if (currentYaw < 0 && desiredYaw > 0) {
                delta = 180 - Math.abs(currentYaw) + 180 - Math.abs(desiredYaw);
            }
        }
        return delta;
    }
    calcViewAnglesToTarget(localPlayer, enemyPlayer) {
        const locationDeltaX = enemyPlayer.localOrigin.value.x - localPlayer.localOrigin.value.x;
        const locationDeltaY = enemyPlayer.localOrigin.value.y - localPlayer.localOrigin.value.y;
        const locationDeltaZ = enemyPlayer.localOrigin.value.z - localPlayer.localOrigin.value.z;
        const hypotenus = Math.sqrt(Math.pow(Math.abs(locationDeltaX), 2) + Math.pow(Math.abs(locationDeltaY), 2));
        const yawInRadians = Math.atan2(locationDeltaY, locationDeltaX);
        const yawInDegrees = yawInRadians * (180 / Math.PI);
        let roundedYaw = Number(yawInDegrees.toFixed(9));
        if (Math.abs(roundedYaw) > 180)
            roundedYaw = 180.00;
        const pitchInRadians = Math.atan(locationDeltaZ / -hypotenus);
        const pitchInDegrees = pitchInRadians * (180 / Math.PI);
        let roundedPitch = Number(pitchInDegrees.toFixed(9));
        if (Math.abs(roundedPitch) > 90)
            roundedPitch = 90.00;
        return { pitch: roundedPitch, yaw: roundedYaw };
    }
    findClosestEnemyPlayer(localPlayer, players) {
        const enemyPlayers = players.filter(p => { return !p.isSameTeam(localPlayer) && !p.bleedoutState.value; });
        if (enemyPlayers.length == 0)
            return null;
        let closesTargetSoFar = enemyPlayers[0];
        let closesTargetSoFarDistance = this.calcDistance(localPlayer, closesTargetSoFar);
        for (let i = 1; i < enemyPlayers.length; i++) {
            const currEP = enemyPlayers[i];
            const currEPDistance = this.calcDistance(localPlayer, currEP);
            if (currEPDistance < closesTargetSoFarDistance) {
                closesTargetSoFar = currEP;
                closesTargetSoFarDistance = currEPDistance;
            }
        }
        return closesTargetSoFar;
    }
    createDummyPLayer() {
        return { localOrigin: { value: { x: 31524.71875, y: -6710.02197265625, z: -29235.982421875 } } };
    }
    calcDistance(playerA, playerB) {
        const dx = playerA.localOrigin.value.x - playerB.localOrigin.value.x;
        const dy = playerA.localOrigin.value.y - playerB.localOrigin.value.y;
        const dz = playerA.localOrigin.value.z - playerB.localOrigin.value.z;
        const distance = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2) + Math.pow(dz, 2));
        return distance;
    }
}
exports.Aimbot = Aimbot;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWltYm90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9mZWF0dXJlcy9BaW1ib3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsTUFBYSxNQUFNO0lBRWpCLFlBQVksQ0FBQyxTQUFpQixFQUFFLFdBQTRCLEVBQUUsT0FBK0I7UUFDM0YsSUFBSSxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUs7WUFDakMsT0FBTztRQUNULE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxTQUFTLElBQUksMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckosSUFBSSxrQkFBa0IsSUFBSSxJQUFJO1lBQUUsT0FBTztRQUN2QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3pFLElBQUksa0JBQWtCLENBQUM7UUFDdkIsSUFBSSxnQkFBZ0IsQ0FBQztRQUNyQixJQUFJLGFBQWEsSUFBSSxHQUFHLEVBQUUsRUFBQyx5Q0FBeUM7WUFDbEUsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1lBQ3hCLGdCQUFnQixHQUFHLENBQUMsQ0FBQztTQUN0QjthQUNJLElBQUksYUFBYSxJQUFJLEdBQUcsRUFBRTtZQUM3QixrQkFBa0IsR0FBRyxFQUFFLENBQUM7WUFDeEIsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1NBQ3RCOztZQUVDLE9BQU8sQ0FBQyxvQkFBb0I7UUFDOUIsTUFBTSxrQkFBa0IsR0FBb0IsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2hJLElBQUksa0JBQWtCLENBQUMsV0FBVyxHQUFHLGtCQUFrQjtZQUFFLE9BQU87UUFDaEUsSUFBSSxrQkFB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O2FBQzVDO1NBQ0Y7UUFDRCxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFFRCxpQkFBaUI7UUFDZixPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDbkcsQ0FBQztJQUVELFlBQVksQ0FBQyxPQUFlLEVBQUUsT0FBZTtRQUMzQyxNQUFNLEVBQUUsR0FBVyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sRUFBRSxHQUFXLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0UsTUFBTSxFQUFFLEdBQVcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3RSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEYsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztDQUlGO0FBN0hELHdCQTZIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuLic7XHJcbmltcG9ydCB7IFBsYXllciB9IGZyb20gJy4uL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEFpbWJvdCB7XHJcblxyXG4gIHVwZGF0ZVN0YXRlcyhsZXZlbE5hbWU6IHN0cmluZywgbG9jYWxQbGF5ZXI6IGFwcC5jb3JlLlBsYXllciwgcGxheWVyczogQXJyYXk8YXBwLmNvcmUuUGxheWVyPikge1xyXG4gICAgaWYgKGxvY2FsUGxheWVyLmJsZWVkb3V0U3RhdGUudmFsdWUpXHJcbiAgICAgIHJldHVybjtcclxuICAgIGNvbnN0IGNsb3Nlc3RFbmVteVBsYXllciA9IChsZXZlbE5hbWUgPT0gXCJtcF9ycl9jYW55b25sYW5kc19zdGFnaW5nXCIpID8gdGhpcy5jcmVhdGVEdW1teVBMYXllcigpIDogdGhpcy5maW5kQ2xvc2VzdEVuZW15UGxheWVyKGxvY2FsUGxheWVyLCBwbGF5ZXJzKTtcclxuICAgIGlmIChjbG9zZXN0RW5lbXlQbGF5ZXIgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgY29uc3QgZW5lbXlEaXN0YW5jZSA9IHRoaXMuY2FsY0Rpc3RhbmNlKGxvY2FsUGxheWVyLCBjbG9zZXN0RW5lbXlQbGF5ZXIpO1xyXG4gICAgbGV0IG1heEFuZ2xlRGVsdGFSYW5nZTtcclxuICAgIGxldCBzbW9vdGhpbmdEaXZpc29yO1xyXG4gICAgaWYgKGVuZW15RGlzdGFuY2UgPD0gMjAwKSB7Ly8yMDAtNDAwIGlzIHByZXR0eSBtdWNoIG9ubHkgY2xvc2UgcmFuZ2VcclxuICAgICAgbWF4QW5nbGVEZWx0YVJhbmdlID0gNTA7XHJcbiAgICAgIHNtb290aGluZ0Rpdmlzb3IgPSAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZW5lbXlEaXN0YW5jZSA8PSA0MDApIHtcclxuICAgICAgbWF4QW5nbGVEZWx0YVJhbmdlID0gMTA7XHJcbiAgICAgIHNtb290aGluZ0Rpdmlzb3IgPSA0O1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICByZXR1cm47IC8vbm8gYWltYm90IHBhc3QgNDAwXHJcbiAgICBjb25zdCBuZXdWaWV3QW5nbGVzU3RhdHM6IFZpZXdBbmdsZXNTdGF0cyA9IHRoaXMuY3JlYXRlTmV3Vmlld2luZ0FuZ2xlc1N0YXRzKGxvY2FsUGxheWVyLCBjbG9zZXN0RW5lbXlQbGF5ZXIsIHNtb290aGluZ0Rpdmlzb3IpO1xyXG4gICAgaWYgKG5ld1ZpZXdBbmdsZXNTdGF0cy55YXdEZWx0YUFicyA+IG1heEFuZ2xlRGVsdGFSYW5nZSkgcmV0dXJuO1xyXG4gICAgaWYgKG5ld1ZpZXdBbmdsZXNTdGF0cy5waXRjaERlbHRhQWJzID4gbWF4QW5nbGVEZWx0YVJhbmdlKSByZXR1cm47XHJcbiAgICB0aGlzLndyaXRlTmV3Vmlld2luZ0FuZ2xlcyhsb2NhbFBsYXllciwgbmV3Vmlld0FuZ2xlc1N0YXRzKTtcclxuICB9XHJcblxyXG4gIHdyaXRlTmV3Vmlld2luZ0FuZ2xlcyhsb2NhbFBsYXllcjogUGxheWVyLCBuZXdWaWV3QW5nbGVzU3RhdHM6IFZpZXdBbmdsZXNTdGF0cykge1xyXG4gICAgbGV0IG5ld1ZpZXdBbmdsZXNWYWx1ZXMgPSBsb2NhbFBsYXllci52aWV3QW5nbGVzLnZhbHVlO1xyXG4gICAgbmV3Vmlld0FuZ2xlc1ZhbHVlcy55IC09IG5ld1ZpZXdBbmdsZXNTdGF0cy55YXdEZWx0YVNtb290aGVkO1xyXG4gICAgbmV3Vmlld0FuZ2xlc1ZhbHVlcy54IC09IG5ld1ZpZXdBbmdsZXNTdGF0cy5waXRjaERlbHRhU21vb3RoZWQ7XHJcbiAgICBsb2NhbFBsYXllci52aWV3QW5nbGVzLnZhbHVlID0gbmV3Vmlld0FuZ2xlc1ZhbHVlczsgLy8gY2F1c2UgdXBkYXRlIGV2ZW50XHJcbiAgfVxyXG5cclxuICBjcmVhdGVOZXdWaWV3aW5nQW5nbGVzU3RhdHMobG9jYWxQbGF5ZXI6IFBsYXllciwgY2xvc2VzdEVuZW15UGxheWVyOiBQbGF5ZXIsIHNtb290aGluZ0Rpdmlzb3I6IG51bWJlcik6IFZpZXdBbmdsZXNTdGF0cyB7XHJcbiAgICBjb25zdCBuZXdWaWV3aW5nQW5nbGVzOiBWaWV3aW5nQW5nbGVzID0gdGhpcy5jYWxjVmlld0FuZ2xlc1RvVGFyZ2V0KGxvY2FsUGxheWVyLCBjbG9zZXN0RW5lbXlQbGF5ZXIpO1xyXG4gICAgY29uc3QgY3VycmVudFlhdzogbnVtYmVyID0gbG9jYWxQbGF5ZXIudmlld0FuZ2xlcy52YWx1ZS55O1xyXG4gICAgY29uc3QgZGVzaXJlZFlhdzogbnVtYmVyID0gbmV3Vmlld2luZ0FuZ2xlcy55YXc7XHJcbiAgICBjb25zdCB5YXdEZWx0YTogbnVtYmVyID0gdGhpcy5jYWxjWWF3RGVsdGFBbmRGbGlwSWZOZWVkZWQoY3VycmVudFlhdywgZGVzaXJlZFlhdyk7XHJcbiAgICBjb25zdCB5YXdEZWx0YUFiczogbnVtYmVyID0gTWF0aC5hYnMoeWF3RGVsdGEpO1xyXG4gICAgY29uc3QgeWF3RGVsdGFTbW9vdGhlZDogbnVtYmVyID0geWF3RGVsdGEgLyBzbW9vdGhpbmdEaXZpc29yO1xyXG4gICAgY29uc3QgZmxpcFlhdzogYm9vbGVhbiA9IGxvY2FsUGxheWVyLmxvY2FsT3JpZ2luLnZhbHVlLnkgPCBjbG9zZXN0RW5lbXlQbGF5ZXIubG9jYWxPcmlnaW4udmFsdWUueTtcclxuICAgIGNvbnN0IGN1cnJlbnRQaXRjaDogbnVtYmVyID0gbG9jYWxQbGF5ZXIudmlld0FuZ2xlcy52YWx1ZS54O1xyXG4gICAgY29uc3QgZGVzaXJlZFBpdGNoOiBudW1iZXIgPSBuZXdWaWV3aW5nQW5nbGVzLnBpdGNoO1xyXG4gICAgY29uc3QgcGl0Y2hEZWx0YTogbnVtYmVyID0gY3VycmVudFBpdGNoIC0gZGVzaXJlZFBpdGNoO1xyXG4gICAgY29uc3QgcGl0Y2hEZWx0YUFiczogbnVtYmVyID0gTWF0aC5hYnMocGl0Y2hEZWx0YSk7XHJcbiAgICBjb25zdCBwaXRjaERlbHRhU21vb3RoZWQ6IG51bWJlciA9IHBpdGNoRGVsdGEgLyBzbW9vdGhpbmdEaXZpc29yO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY3VycmVudFlhdzogY3VycmVudFlhdyxcclxuICAgICAgZGVzaXJlZFlhdzogZGVzaXJlZFlhdyxcclxuICAgICAgeWF3RGVsdGE6IHlhd0RlbHRhLFxyXG4gICAgICB5YXdEZWx0YUFiczogeWF3RGVsdGFBYnMsXHJcbiAgICAgIHlhd0RlbHRhU21vb3RoZWQ6IHlhd0RlbHRhU21vb3RoZWQsXHJcbiAgICAgIGZsaXBZYXc6IGZsaXBZYXcsXHJcbiAgICAgIGN1cnJlbnRQaXRjaDogY3VycmVudFBpdGNoLFxyXG4gICAgICBkZXNpcmVkUGl0Y2g6IGRlc2lyZWRQaXRjaCxcclxuICAgICAgcGl0Y2hEZWx0YTogcGl0Y2hEZWx0YSxcclxuICAgICAgcGl0Y2hEZWx0YUFiczogcGl0Y2hEZWx0YUFicyxcclxuICAgICAgcGl0Y2hEZWx0YVNtb290aGVkOiBwaXRjaERlbHRhU21vb3RoZWQsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjWWF3RGVsdGFBbmRGbGlwSWZOZWVkZWQoY3VycmVudFlhdzogbnVtYmVyLCBkZXNpcmVkWWF3OiBudW1iZXIpIHtcclxuICAgIGxldCBkZWx0YSA9IGN1cnJlbnRZYXcgLSBkZXNpcmVkWWF3O1xyXG4gICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+IDE4MCkge1xyXG4gICAgICBpZiAoY3VycmVudFlhdyA+IDAgJiYgZGVzaXJlZFlhdyA8IDApXHJcbiAgICAgICAgZGVsdGEgLT0gMzYwO1xyXG4gICAgICBpZiAoY3VycmVudFlhdyA8IDAgJiYgZGVzaXJlZFlhdyA+IDApIHtcclxuICAgICAgICBkZWx0YSA9IDE4MCAtIE1hdGguYWJzKGN1cnJlbnRZYXcpICsgMTgwIC0gTWF0aC5hYnMoZGVzaXJlZFlhdyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkZWx0YTtcclxuICB9XHJcblxyXG4gIGNhbGNWaWV3QW5nbGVzVG9UYXJnZXQobG9jYWxQbGF5ZXI6IFBsYXllciwgZW5lbXlQbGF5ZXI6IFBsYXllcik6IFZpZXdpbmdBbmdsZXMge1xyXG4gICAgY29uc3QgbG9jYXRpb25EZWx0YVg6IG51bWJlciA9IGVuZW15UGxheWVyLmxvY2FsT3JpZ2luLnZhbHVlLnggLSBsb2NhbFBsYXllci5sb2NhbE9yaWdpbi52YWx1ZS54O1xyXG4gICAgY29uc3QgbG9jYXRpb25EZWx0YVk6IG51bWJlciA9IGVuZW15UGxheWVyLmxvY2FsT3JpZ2luLnZhbHVlLnkgLSBsb2NhbFBsYXllci5sb2NhbE9yaWdpbi52YWx1ZS55O1xyXG4gICAgY29uc3QgbG9jYXRpb25EZWx0YVo6IG51bWJlciA9IGVuZW15UGxheWVyLmxvY2FsT3JpZ2luLnZhbHVlLnogLSBsb2NhbFBsYXllci5sb2NhbE9yaWdpbi52YWx1ZS56O1xyXG4gICAgY29uc3QgaHlwb3RlbnVzID0gTWF0aC5zcXJ0KE1hdGgucG93KE1hdGguYWJzKGxvY2F0aW9uRGVsdGFYKSwgMikgKyBNYXRoLnBvdyhNYXRoLmFicyhsb2NhdGlvbkRlbHRhWSksIDIpKTtcclxuXHJcbiAgICBjb25zdCB5YXdJblJhZGlhbnMgPSBNYXRoLmF0YW4yKGxvY2F0aW9uRGVsdGFZLCBsb2NhdGlvbkRlbHRhWCk7XHJcbiAgICBjb25zdCB5YXdJbkRlZ3JlZXMgPSB5YXdJblJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSk7XHJcbiAgICBsZXQgcm91bmRlZFlhdyA9IE51bWJlcih5YXdJbkRlZ3JlZXMudG9GaXhlZCg5KSk7XHJcbiAgICBpZiAoTWF0aC5hYnMocm91bmRlZFlhdykgPiAxODApXHJcbiAgICAgIHJvdW5kZWRZYXcgPSAxODAuMDA7XHJcblxyXG4gICAgY29uc3QgcGl0Y2hJblJhZGlhbnMgPSBNYXRoLmF0YW4obG9jYXRpb25EZWx0YVogLyAtaHlwb3RlbnVzKTtcclxuICAgIGNvbnN0IHBpdGNoSW5EZWdyZWVzOiBudW1iZXIgPSBwaXRjaEluUmFkaWFucyAqICgxODAgLyBNYXRoLlBJKTtcclxuICAgIGxldCByb3VuZGVkUGl0Y2ggPSBOdW1iZXIocGl0Y2hJbkRlZ3JlZXMudG9GaXhlZCg5KSk7XHJcbiAgICBpZiAoTWF0aC5hYnMocm91bmRlZFBpdGNoKSA+IDkwKVxyXG4gICAgICByb3VuZGVkUGl0Y2ggPSA5MC4wMDtcclxuXHJcbiAgICByZXR1cm4geyBwaXRjaDogcm91bmRlZFBpdGNoLCB5YXc6IHJvdW5kZWRZYXcgfTtcclxuICB9XHJcblxyXG4gIGZpbmRDbG9zZXN0RW5lbXlQbGF5ZXIobG9jYWxQbGF5ZXI6IFBsYXllciwgcGxheWVyczogQXJyYXk8UGxheWVyPik6IFBsYXllciB8IG51bGwge1xyXG4gICAgY29uc3QgZW5lbXlQbGF5ZXJzID0gcGxheWVycy5maWx0ZXIocCA9PiB7IHJldHVybiAhcC5pc1NhbWVUZWFtKGxvY2FsUGxheWVyKSAmJiAhcC5ibGVlZG91dFN0YXRlLnZhbHVlIH0pO1xyXG4gICAgaWYgKGVuZW15UGxheWVycy5sZW5ndGggPT0gMClcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBsZXQgY2xvc2VzVGFyZ2V0U29GYXI6IFBsYXllciA9IGVuZW15UGxheWVyc1swXTtcclxuICAgIGxldCBjbG9zZXNUYXJnZXRTb0ZhckRpc3RhbmNlID0gdGhpcy5jYWxjRGlzdGFuY2UobG9jYWxQbGF5ZXIsIGNsb3Nlc1RhcmdldFNvRmFyKTtcclxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IDE7IGkgPCBlbmVteVBsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgY3VyckVQID0gZW5lbXlQbGF5ZXJzW2ldO1xyXG4gICAgICBjb25zdCBjdXJyRVBEaXN0YW5jZSA9IHRoaXMuY2FsY0Rpc3RhbmNlKGxvY2FsUGxheWVyLCBjdXJyRVApO1xyXG4gICAgICBpZiAoY3VyckVQRGlzdGFuY2UgPCBjbG9zZXNUYXJnZXRTb0ZhckRpc3RhbmNlKSB7XHJcbiAgICAgICAgY2xvc2VzVGFyZ2V0U29GYXIgPSBjdXJyRVA7XHJcbiAgICAgICAgY2xvc2VzVGFyZ2V0U29GYXJEaXN0YW5jZSA9IGN1cnJFUERpc3RhbmNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xvc2VzVGFyZ2V0U29GYXI7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVEdW1teVBMYXllcigpOiBhbnkge1xyXG4gICAgcmV0dXJuIHsgbG9jYWxPcmlnaW46IHsgdmFsdWU6IHsgeDogMzE1MjQuNzE4NzUsIHk6IC02NzEwLjAyMTk3MjY1NjI1LCB6OiAtMjkyMzUuOTgyNDIxODc1IH0gfSB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY0Rpc3RhbmNlKHBsYXllckE6IFBsYXllciwgcGxheWVyQjogUGxheWVyKSB7XHJcbiAgICBjb25zdCBkeDogbnVtYmVyID0gcGxheWVyQS5sb2NhbE9yaWdpbi52YWx1ZS54IC0gcGxheWVyQi5sb2NhbE9yaWdpbi52YWx1ZS54O1xyXG4gICAgY29uc3QgZHk6IG51bWJlciA9IHBsYXllckEubG9jYWxPcmlnaW4udmFsdWUueSAtIHBsYXllckIubG9jYWxPcmlnaW4udmFsdWUueTtcclxuICAgIGNvbnN0IGR6OiBudW1iZXIgPSBwbGF5ZXJBLmxvY2FsT3JpZ2luLnZhbHVlLnogLSBwbGF5ZXJCLmxvY2FsT3JpZ2luLnZhbHVlLno7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhkeCwgMikgKyBNYXRoLnBvdyhkeSwgMikgKyBNYXRoLnBvdyhkeiwgMikpO1xyXG4gICAgcmV0dXJuIGRpc3RhbmNlO1xyXG4gIH1cclxuXHJcblxyXG5cclxufVxyXG5cclxuaW50ZXJmYWNlIFZpZXdpbmdBbmdsZXMge1xyXG4gIHlhdzogbnVtYmVyO1xyXG4gIHBpdGNoOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBWaWV3QW5nbGVzU3RhdHMge1xyXG4gIGN1cnJlbnRZYXc6IG51bWJlcjtcclxuICBkZXNpcmVkWWF3OiBudW1iZXI7XHJcbiAgeWF3RGVsdGE6IG51bWJlcjtcclxuICB5YXdEZWx0YUFiczogbnVtYmVyO1xyXG4gIHlhd0RlbHRhU21vb3RoZWQ6IG51bWJlcjtcclxuICBmbGlwWWF3OiBib29sZWFuO1xyXG4gIGN1cnJlbnRQaXRjaDogbnVtYmVyO1xyXG4gIGRlc2lyZWRQaXRjaDogbnVtYmVyO1xyXG4gIHBpdGNoRGVsdGE6IG51bWJlcjtcclxuICBwaXRjaERlbHRhQWJzOiBudW1iZXI7XHJcbiAgcGl0Y2hEZWx0YVNtb290aGVkOiBudW1iZXI7XHJcbn1cclxuIl19