"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryReader = void 0;
class BinaryReader {
    constructor(buffer) {
        this.buffer = buffer;
        this.offset = 0;
    }
    hasBytes() {
        return this.offset < this.buffer.byteLength - this.buffer.byteOffset;
    }
    readByteArray() {
        const size = this.readUInt16();
        const buffer = new DataView(this.buffer.buffer, this.buffer.byteOffset + this.offset, size);
        this.offset += size;
        return buffer;
    }
    readEntityArray(factory) {
        const size = this.readUInt16();
        const items = [];
        for (let i = 0; i < size; i++)
            items[i] = factory(this);
        return items;
    }
    readUInt8() {
        const result = this.buffer.getUint8(this.offset);
        this.offset += 1;
        return result;
    }
    readUInt16() {
        const result = this.buffer.getUint16(this.offset, true);
        this.offset += 2;
        return result;
    }
    readUInt64() {
        const result = this.buffer.getBigUint64(this.offset, true);
        this.offset += 8;
        return result;
    }
}
exports.BinaryReader = BinaryReader;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmluYXJ5UmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hcGkvc3RyZWFtcy9CaW5hcnlSZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBYSxZQUFZO0lBSXZCLFlBQVksTUFBZ0I7UUFDMUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDdkUsQ0FBQztJQUVELGFBQWE7UUFDWCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1RixJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUNwQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsZUFBZSxDQUFJLE9BQW9DO1FBQ3JELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMvQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUU7WUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFNBQVM7UUFDUCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFVBQVU7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBQ2pCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxVQUFVO1FBQ1IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztRQUNqQixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUE1Q0Qsb0NBNENDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEJpbmFyeVJlYWRlciB7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBidWZmZXI6IERhdGFWaWV3O1xyXG4gIHByaXZhdGUgb2Zmc2V0OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGJ1ZmZlcjogRGF0YVZpZXcpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gIH1cclxuXHJcbiAgaGFzQnl0ZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5vZmZzZXQgPCB0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoIC0gdGhpcy5idWZmZXIuYnl0ZU9mZnNldDtcclxuICB9XHJcblxyXG4gIHJlYWRCeXRlQXJyYXkoKSB7XHJcbiAgICBjb25zdCBzaXplID0gdGhpcy5yZWFkVUludDE2KCk7XHJcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIuYnVmZmVyLCB0aGlzLmJ1ZmZlci5ieXRlT2Zmc2V0ICsgdGhpcy5vZmZzZXQsIHNpemUpO1xyXG4gICAgdGhpcy5vZmZzZXQgKz0gc2l6ZTtcclxuICAgIHJldHVybiBidWZmZXI7XHJcbiAgfVxyXG5cclxuICByZWFkRW50aXR5QXJyYXk8VD4oZmFjdG9yeTogKHN0cmVhbTogQmluYXJ5UmVhZGVyKSA9PiBUKSB7XHJcbiAgICBjb25zdCBzaXplID0gdGhpcy5yZWFkVUludDE2KCk7XHJcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIGl0ZW1zW2ldID0gZmFjdG9yeSh0aGlzKTtcclxuICAgIHJldHVybiBpdGVtcztcclxuICB9XHJcblxyXG4gIHJlYWRVSW50OCgpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLmdldFVpbnQ4KHRoaXMub2Zmc2V0KTtcclxuICAgIHRoaXMub2Zmc2V0ICs9IDE7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcmVhZFVJbnQxNigpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLmdldFVpbnQxNih0aGlzLm9mZnNldCwgdHJ1ZSk7XHJcbiAgICB0aGlzLm9mZnNldCArPSAyO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHJlYWRVSW50NjQoKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci5nZXRCaWdVaW50NjQodGhpcy5vZmZzZXQsIHRydWUpO1xyXG4gICAgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==