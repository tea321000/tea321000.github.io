"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tracker = void 0;
const app = require("..");
class Tracker {
    constructor() {
        this.aliveEntities = {};
        this.createEntities = {};
        this.deleteEntities = {};
    }
    create(entity) {
        const key = entity.address.toString(16);
        if (this.aliveEntities[key] || this.createEntities[key]) {
            throw new Error(`Duplicate entity: ${key}`);
        }
        else {
            this.createEntities[key] = entity;
        }
    }
    delete(entity) {
        const key = entity.address.toString(16);
        if (this.deleteEntities[key]) {
            throw new Error(`Pending entity: ${entity}`);
        }
        else if (this.createEntities[key]) {
            delete this.createEntities[key];
        }
        else if (this.aliveEntities[key]) {
            this.deleteEntities[key] = this.aliveEntities[key];
            delete this.aliveEntities[key];
        }
    }
    receive(update) {
        for (const x of update.entities) {
            this.aliveEntities[x.address.toString(16)]?.receive(x);
        }
    }
    update(writer) {
        for (const [k, x] of Object.entries(this.deleteEntities)) {
            const packet = new app.DeleteEntity(x.address);
            writer.writeUInt8(app.PacketType.DeleteEntity);
            packet.write(writer);
            delete this.deleteEntities[k];
        }
        for (const [k, x] of Object.entries(this.createEntities)) {
            this.aliveEntities[k] = x;
            const members = Object.values(x.members).map(x => new app.CreateEntityMember(x.offset, x.interval, x.buffer.byteLength));
            const packet = new app.CreateEntity(x.address, members);
            writer.writeUInt8(app.PacketType.CreateEntity);
            packet.write(writer);
            delete this.createEntities[k];
        }
        for (const x of Object.values(this.aliveEntities)) {
            const packet = x.update();
            if (!packet)
                continue;
            writer.writeUInt8(app.PacketType.ChangeEntity);
            packet.write(writer);
        }
    }
}
exports.Tracker = Tracker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhY2tlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvYXBpL21vZGVscy9UcmFja2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBCQUEwQjtBQUUxQixNQUFhLE9BQU87SUFLbEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQWtCO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNMLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFrQjtRQUN2QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM5QzthQUFNLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDakM7YUFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25ELE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNoQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsTUFBdUI7UUFDN0IsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQy9CLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQXdCO1FBQzdCLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN4RCxNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQjtRQUNELEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMxQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3pILE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3hELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3JCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQjtRQUNELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDakQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxNQUFNO2dCQUFFLFNBQVM7WUFDdEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0NBQ0Y7QUE1REQsMEJBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFja2VyIHtcclxuICBwcml2YXRlIHJlYWRvbmx5IGFsaXZlRW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIGFwcC5FbnRpdHk+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgY3JlYXRlRW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIGFwcC5FbnRpdHk+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGVsZXRlRW50aXRpZXM6IFJlY29yZDxzdHJpbmcsIGFwcC5FbnRpdHk+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuYWxpdmVFbnRpdGllcyA9IHt9O1xyXG4gICAgdGhpcy5jcmVhdGVFbnRpdGllcyA9IHt9O1xyXG4gICAgdGhpcy5kZWxldGVFbnRpdGllcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlKGVudGl0eTogYXBwLkVudGl0eSkge1xyXG4gICAgY29uc3Qga2V5ID0gZW50aXR5LmFkZHJlc3MudG9TdHJpbmcoMTYpO1xyXG4gICAgaWYgKHRoaXMuYWxpdmVFbnRpdGllc1trZXldIHx8IHRoaXMuY3JlYXRlRW50aXRpZXNba2V5XSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYER1cGxpY2F0ZSBlbnRpdHk6ICR7a2V5fWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jcmVhdGVFbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGVudGl0eTogYXBwLkVudGl0eSkge1xyXG4gICAgY29uc3Qga2V5ID0gZW50aXR5LmFkZHJlc3MudG9TdHJpbmcoMTYpO1xyXG4gICAgaWYgKHRoaXMuZGVsZXRlRW50aXRpZXNba2V5XSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFBlbmRpbmcgZW50aXR5OiAke2VudGl0eX1gKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5jcmVhdGVFbnRpdGllc1trZXldKSB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmNyZWF0ZUVudGl0aWVzW2tleV07XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWxpdmVFbnRpdGllc1trZXldKSB7XHJcbiAgICAgIHRoaXMuZGVsZXRlRW50aXRpZXNba2V5XSA9IHRoaXMuYWxpdmVFbnRpdGllc1trZXldO1xyXG4gICAgICBkZWxldGUgdGhpcy5hbGl2ZUVudGl0aWVzW2tleV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWNlaXZlKHVwZGF0ZTogYXBwLlVwZGF0ZUFycmF5KSB7XHJcbiAgICBmb3IgKGNvbnN0IHggb2YgdXBkYXRlLmVudGl0aWVzKSB7XHJcbiAgICAgIHRoaXMuYWxpdmVFbnRpdGllc1t4LmFkZHJlc3MudG9TdHJpbmcoMTYpXT8ucmVjZWl2ZSh4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZSh3cml0ZXI6IGFwcC5CaW5hcnlXcml0ZXIpIHtcclxuICAgIGZvciAoY29uc3QgW2ssIHhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuZGVsZXRlRW50aXRpZXMpKSB7XHJcbiAgICAgIGNvbnN0IHBhY2tldCA9IG5ldyBhcHAuRGVsZXRlRW50aXR5KHguYWRkcmVzcyk7XHJcbiAgICAgIHdyaXRlci53cml0ZVVJbnQ4KGFwcC5QYWNrZXRUeXBlLkRlbGV0ZUVudGl0eSk7XHJcbiAgICAgIHBhY2tldC53cml0ZSh3cml0ZXIpO1xyXG4gICAgICBkZWxldGUgdGhpcy5kZWxldGVFbnRpdGllc1trXTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgW2ssIHhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMuY3JlYXRlRW50aXRpZXMpKSB7XHJcbiAgICAgIHRoaXMuYWxpdmVFbnRpdGllc1trXSA9IHg7XHJcbiAgICAgIGNvbnN0IG1lbWJlcnMgPSBPYmplY3QudmFsdWVzKHgubWVtYmVycykubWFwKHggPT4gbmV3IGFwcC5DcmVhdGVFbnRpdHlNZW1iZXIoeC5vZmZzZXQsIHguaW50ZXJ2YWwsIHguYnVmZmVyLmJ5dGVMZW5ndGgpKTtcclxuICAgICAgY29uc3QgcGFja2V0ID0gbmV3IGFwcC5DcmVhdGVFbnRpdHkoeC5hZGRyZXNzLCBtZW1iZXJzKTtcclxuICAgICAgd3JpdGVyLndyaXRlVUludDgoYXBwLlBhY2tldFR5cGUuQ3JlYXRlRW50aXR5KTtcclxuICAgICAgcGFja2V0LndyaXRlKHdyaXRlcik7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmNyZWF0ZUVudGl0aWVzW2tdO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCB4IG9mIE9iamVjdC52YWx1ZXModGhpcy5hbGl2ZUVudGl0aWVzKSkge1xyXG4gICAgICBjb25zdCBwYWNrZXQgPSB4LnVwZGF0ZSgpO1xyXG4gICAgICBpZiAoIXBhY2tldCkgY29udGludWU7XHJcbiAgICAgIHdyaXRlci53cml0ZVVJbnQ4KGFwcC5QYWNrZXRUeXBlLkNoYW5nZUVudGl0eSk7XHJcbiAgICAgIHBhY2tldC53cml0ZSh3cml0ZXIpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=