"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = require("./lib");
const ui_1 = require("./ui");
const canvas = document.querySelector('.canvas');
const map = new app.features.Map(canvas);
canvas.addEventListener('dblclick', () => {
    (document.fullscreenElement
        ? document.exitFullscreen()
        : document.body.requestFullscreen()).catch();
});
(0, ui_1.ui)(x => renderAsync(x, new app.features.Sense()).finally(() => {
    canvas.height = 0;
    canvas.width = 0;
}));
async function renderAsync(core, sense) {
    await core.runAsync(() => {
        const levelName = core.levelName.value;
        const players = core.entityList.value;
        const localPlayer = players.find(x => x.address === core.localPlayer.value);
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
        renderFrame(levelName, localPlayer, players),
            updateSense(localPlayer, players, sense);
    });
}
function renderFrame(levelName, localPlayer, players) {
    map.refresh(levelName);
    if (!localPlayer)
        return;
    map.renderAll(localPlayer, players);
}
function updateSense(localPlayer, players, sense) {
    if (!localPlayer)
        return;
    if (!location.hash.includes('enable-sense'))
        return;
    sense.updateStates(localPlayer, players);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3Qiw2QkFBd0I7QUFDeEIsTUFBTSxNQUFNLEdBQXVCLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUV6QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUN2QyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUI7UUFDekIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUU7UUFDM0IsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBQSxPQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUU7SUFDNUQsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbEIsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUVKLEtBQUssVUFBVSxXQUFXLENBQUMsSUFBbUIsRUFBRSxLQUF5QjtJQUN2RSxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3ZDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQ3RDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUUsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNqQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUM7WUFDNUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsU0FBaUIsRUFBRSxXQUF3QyxFQUFFLE9BQStCO0lBQy9HLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPO0lBQ3pCLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxXQUF3QyxFQUFFLE9BQStCLEVBQUUsS0FBeUI7SUFDdkgsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPO0lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUM7UUFBRSxPQUFPO0lBQ3BELEtBQUssQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzNDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi9saWInO1xyXG5pbXBvcnQge3VpfSBmcm9tICcuL3VpJztcclxuY29uc3QgY2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzJyk7XHJcbmNvbnN0IG1hcCA9IG5ldyBhcHAuZmVhdHVyZXMuTWFwKGNhbnZhcyk7XHJcblxyXG5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCAoKSA9PiB7XHJcbiAgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50XHJcbiAgICA/IGRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKClcclxuICAgIDogZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbHNjcmVlbigpKS5jYXRjaCgpO1xyXG59KTtcclxuXHJcbnVpKHggPT4gcmVuZGVyQXN5bmMoeCwgbmV3IGFwcC5mZWF0dXJlcy5TZW5zZSgpKS5maW5hbGx5KCgpID0+IHtcclxuICBjYW52YXMuaGVpZ2h0ID0gMDtcclxuICBjYW52YXMud2lkdGggPSAwO1xyXG59KSk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiByZW5kZXJBc3luYyhjb3JlOiBhcHAuY29yZS5Db3JlLCBzZW5zZTogYXBwLmZlYXR1cmVzLlNlbnNlKSB7XHJcbiAgYXdhaXQgY29yZS5ydW5Bc3luYygoKSA9PiB7XHJcbiAgICBjb25zdCBsZXZlbE5hbWUgPSBjb3JlLmxldmVsTmFtZS52YWx1ZTtcclxuICAgIGNvbnN0IHBsYXllcnMgPSBjb3JlLmVudGl0eUxpc3QudmFsdWU7XHJcbiAgICBjb25zdCBsb2NhbFBsYXllciA9IHBsYXllcnMuZmluZCh4ID0+IHguYWRkcmVzcyA9PT0gY29yZS5sb2NhbFBsYXllci52YWx1ZSk7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICByZW5kZXJGcmFtZShsZXZlbE5hbWUsIGxvY2FsUGxheWVyLCBwbGF5ZXJzKSxcclxuICAgIHVwZGF0ZVNlbnNlKGxvY2FsUGxheWVyLCBwbGF5ZXJzLCBzZW5zZSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckZyYW1lKGxldmVsTmFtZTogc3RyaW5nLCBsb2NhbFBsYXllcjogYXBwLmNvcmUuUGxheWVyIHwgdW5kZWZpbmVkLCBwbGF5ZXJzOiBBcnJheTxhcHAuY29yZS5QbGF5ZXI+KSB7XHJcbiAgbWFwLnJlZnJlc2gobGV2ZWxOYW1lKTtcclxuICBpZiAoIWxvY2FsUGxheWVyKSByZXR1cm47XHJcbiAgbWFwLnJlbmRlckFsbChsb2NhbFBsYXllciwgcGxheWVycyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVNlbnNlKGxvY2FsUGxheWVyOiBhcHAuY29yZS5QbGF5ZXIgfCB1bmRlZmluZWQsIHBsYXllcnM6IEFycmF5PGFwcC5jb3JlLlBsYXllcj4sIHNlbnNlOiBhcHAuZmVhdHVyZXMuU2Vuc2UpIHtcclxuICBpZiAoIWxvY2FsUGxheWVyKSByZXR1cm47XHJcbiAgaWYgKCFsb2NhdGlvbi5oYXNoLmluY2x1ZGVzKCdlbmFibGUtc2Vuc2UnKSkgcmV0dXJuO1xyXG4gIHNlbnNlLnVwZGF0ZVN0YXRlcyhsb2NhbFBsYXllciwgcGxheWVycyk7XHJcbn1cclxuIl19