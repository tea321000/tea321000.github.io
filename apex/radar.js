"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = require("./lib");
const ui_1 = require("./ui");
const canvas = document.querySelector('.canvas');
const radar = new app.features.Radar(canvas);
canvas.addEventListener('dblclick', () => {
    (document.fullscreenElement
        ? document.exitFullscreen()
        : document.body.requestFullscreen()).catch();
});
(0, ui_1.ui)(x => renderAsync(x, new app.features.Sense(), new app.features.Aimbot()).finally(() => {
    canvas.height = 0;
    canvas.width = 0;
}));
async function renderAsync(core, sense, aimbot) {
    await core.runAsync(() => {
        const levelName = core.levelName.value;
        const players = core.entityList.value;
        const localPlayer = players.find(x => x.address === core.localPlayer.value);
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
        renderFrame(levelName, localPlayer, players);
        updateSense(localPlayer, players, sense);
        updateAimbot(levelName, localPlayer, players, aimbot);
    });
}
function renderFrame(levelName, localPlayer, players) {
    switch (levelName) {
        case 'mp_rr_canyonlands_staging':
            radar.refresh();
            if (!localPlayer)
                break;
            radar.renderOne(localPlayer, { x: 31482.994140625, y: -6708.69677734375, z: 0 }, '#FFF');
            break;
        default:
            radar.refresh();
            if (!localPlayer)
                break;
            radar.renderAll(localPlayer, players);
            break;
    }
}
function updateSense(localPlayer, players, sense) {
    if (!localPlayer)
        return;
    if (!location.hash.includes('enable-sense') || !location.hash.includes('enable-sense-aimbot'))
        return;
    sense.updateStates(localPlayer, players);
}
function updateAimbot(levelName, localPlayer, players, aimbot) {
    if (!localPlayer)
        return;
    if (!location.hash.includes('enable-sense-aimbot'))
        return;
    aimbot.updateStates(levelName, localPlayer, players);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmFkYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsNkJBQTBCO0FBQzFCLE1BQU0sTUFBTSxHQUFzQixRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3BFLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFN0MsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDdkMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCO1FBQ3pCLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFO1FBQzNCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsT0FBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUN2RixNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQixNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRUosS0FBSyxVQUFVLFdBQVcsQ0FBQyxJQUFtQixFQUFFLEtBQXlCLEVBQUUsTUFBMkI7SUFDcEcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUN2QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVFLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNuQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDakMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0MsV0FBVyxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekMsWUFBWSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLFNBQWlCLEVBQUUsV0FBd0MsRUFBRSxPQUErQjtJQUMvRyxRQUFRLFNBQVMsRUFBRTtRQUNqQixLQUFLLDJCQUEyQjtZQUM5QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsTUFBTTtZQUN4QixLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pGLE1BQU07UUFDUjtZQUNFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNoQixJQUFJLENBQUMsV0FBVztnQkFBRSxNQUFNO1lBQ3hCLEtBQUssQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3RDLE1BQU07S0FDVDtBQUNILENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxXQUF3QyxFQUFFLE9BQStCLEVBQUUsS0FBeUI7SUFDdkgsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPO0lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFxQixDQUFDO1FBQUUsT0FBTztJQUN0RyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsU0FBaUIsRUFBRSxXQUF3QyxFQUFFLE9BQStCLEVBQUUsTUFBMkI7SUFDN0ksSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPO0lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztRQUFFLE9BQU87SUFDM0QsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi9saWInO1xyXG5pbXBvcnQgeyB1aSB9IGZyb20gJy4vdWknO1xyXG5jb25zdCBjYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcycpO1xyXG5jb25zdCByYWRhciA9IG5ldyBhcHAuZmVhdHVyZXMuUmFkYXIoY2FudmFzKTtcclxuXHJcbmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsICgpID0+IHtcclxuICAoZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnRcclxuICAgID8gZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxyXG4gICAgOiBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsc2NyZWVuKCkpLmNhdGNoKCk7XHJcbn0pO1xyXG5cclxudWkoeCA9PiByZW5kZXJBc3luYyh4LCBuZXcgYXBwLmZlYXR1cmVzLlNlbnNlKCksIG5ldyBhcHAuZmVhdHVyZXMuQWltYm90KCkpLmZpbmFsbHkoKCkgPT4ge1xyXG4gIGNhbnZhcy5oZWlnaHQgPSAwO1xyXG4gIGNhbnZhcy53aWR0aCA9IDA7XHJcbn0pKTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHJlbmRlckFzeW5jKGNvcmU6IGFwcC5jb3JlLkNvcmUsIHNlbnNlOiBhcHAuZmVhdHVyZXMuU2Vuc2UsIGFpbWJvdDogYXBwLmZlYXR1cmVzLkFpbWJvdCkge1xyXG4gIGF3YWl0IGNvcmUucnVuQXN5bmMoKCkgPT4ge1xyXG4gICAgY29uc3QgbGV2ZWxOYW1lID0gY29yZS5sZXZlbE5hbWUudmFsdWU7XHJcbiAgICBjb25zdCBwbGF5ZXJzID0gY29yZS5lbnRpdHlMaXN0LnZhbHVlO1xyXG4gICAgY29uc3QgbG9jYWxQbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoeCA9PiB4LmFkZHJlc3MgPT09IGNvcmUubG9jYWxQbGF5ZXIudmFsdWUpO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgcmVuZGVyRnJhbWUobGV2ZWxOYW1lLCBsb2NhbFBsYXllciwgcGxheWVycyk7XHJcbiAgICB1cGRhdGVTZW5zZShsb2NhbFBsYXllciwgcGxheWVycywgc2Vuc2UpO1xyXG4gICAgdXBkYXRlQWltYm90KGxldmVsTmFtZSwgbG9jYWxQbGF5ZXIsIHBsYXllcnMsIGFpbWJvdCk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckZyYW1lKGxldmVsTmFtZTogc3RyaW5nLCBsb2NhbFBsYXllcjogYXBwLmNvcmUuUGxheWVyIHwgdW5kZWZpbmVkLCBwbGF5ZXJzOiBBcnJheTxhcHAuY29yZS5QbGF5ZXI+KSB7XHJcbiAgc3dpdGNoIChsZXZlbE5hbWUpIHtcclxuICAgIGNhc2UgJ21wX3JyX2NhbnlvbmxhbmRzX3N0YWdpbmcnOlxyXG4gICAgICByYWRhci5yZWZyZXNoKCk7XHJcbiAgICAgIGlmICghbG9jYWxQbGF5ZXIpIGJyZWFrO1xyXG4gICAgICByYWRhci5yZW5kZXJPbmUobG9jYWxQbGF5ZXIsIHsgeDogMzE0ODIuOTk0MTQwNjI1LCB5OiAtNjcwOC42OTY3NzczNDM3NSwgejogMCB9LCAnI0ZGRicpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJhZGFyLnJlZnJlc2goKTtcclxuICAgICAgaWYgKCFsb2NhbFBsYXllcikgYnJlYWs7XHJcbiAgICAgIHJhZGFyLnJlbmRlckFsbChsb2NhbFBsYXllciwgcGxheWVycyk7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlU2Vuc2UobG9jYWxQbGF5ZXI6IGFwcC5jb3JlLlBsYXllciB8IHVuZGVmaW5lZCwgcGxheWVyczogQXJyYXk8YXBwLmNvcmUuUGxheWVyPiwgc2Vuc2U6IGFwcC5mZWF0dXJlcy5TZW5zZSkge1xyXG4gIGlmICghbG9jYWxQbGF5ZXIpIHJldHVybjtcclxuICBpZiAoIWxvY2F0aW9uLmhhc2guaW5jbHVkZXMoJ2VuYWJsZS1zZW5zZScpIHx8ICFsb2NhdGlvbi5oYXNoLmluY2x1ZGVzKCdlbmFibGUtc2Vuc2UtYWltYm90JykpIHJldHVybjtcclxuICBzZW5zZS51cGRhdGVTdGF0ZXMobG9jYWxQbGF5ZXIsIHBsYXllcnMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVBaW1ib3QobGV2ZWxOYW1lOiBzdHJpbmcsIGxvY2FsUGxheWVyOiBhcHAuY29yZS5QbGF5ZXIgfCB1bmRlZmluZWQsIHBsYXllcnM6IEFycmF5PGFwcC5jb3JlLlBsYXllcj4sIGFpbWJvdDogYXBwLmZlYXR1cmVzLkFpbWJvdCkge1xyXG4gIGlmICghbG9jYWxQbGF5ZXIpIHJldHVybjtcclxuICBpZiAoIWxvY2F0aW9uLmhhc2guaW5jbHVkZXMoJ2VuYWJsZS1zZW5zZS1haW1ib3QnKSkgcmV0dXJuO1xyXG4gIGFpbWJvdC51cGRhdGVTdGF0ZXMobGV2ZWxOYW1lLCBsb2NhbFBsYXllciwgcGxheWVycyk7XHJcbn1cclxuIl19