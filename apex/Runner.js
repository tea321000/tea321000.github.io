"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Runner = void 0;
const app = require("lib");
const ui = require("ui");
class Runner {
    constructor(canvas = document.getElementById('canvas'), map = new app.features.Map(canvas), radar = new app.features.Radar(canvas), recoil = new app.features.Recoil(), sense = new app.features.Sense()) {
        this.canvas = canvas;
        this.map = map;
        this.radar = radar;
        this.recoil = recoil;
        this.sense = sense;
    }
    static create() {
        const source = new Runner();
        source.attach();
        return source.run.bind(source);
    }
    run(core, vm) {
        const localPlayer = core.playerList.get(core.localPlayer.value);
        this.updateResearch(core, vm, localPlayer);
        this.updateSense(core, vm, localPlayer);
        this.canvas.height = window.innerHeight;
        this.canvas.width = window.innerWidth;
        this.update(core, vm, localPlayer);
    }
    attach() {
        this.canvas.addEventListener('dblclick', () => {
            (document.fullscreenElement
                ? document.exitFullscreen()
                : document.body.requestFullscreen()).catch();
        });
    }
    update(core, vm, localPlayer) {
        switch (vm.settings.general.viewType.value) {
            case ui.settings.general.MainType.Map:
                this.map.refresh(core.levelName.value);
                this.updateMap(core, vm, localPlayer);
                break;
            case ui.settings.general.MainType.Radar:
                this.radar.refresh();
                this.updateRadar(core, vm, localPlayer);
                break;
        }
    }
    updateMap(core, vm, localPlayer) {
        if (vm.settings.general.map.showItems.value)
            this.map.renderItems(core.itemList.values(), vm.settings.itemSet);
        if (vm.settings.general.map.showPlayers.value && localPlayer)
            this.map.renderPlayers(localPlayer, core.playerList.values());
    }
    updateRadar(core, vm, localPlayer) {
        if (vm.settings.general.radar.showItems.value && localPlayer)
            this.radar.renderItems(localPlayer, core.itemList.values(), vm.settings.itemSet);
        if (vm.settings.general.radar.showPlayers.value && localPlayer)
            this.radar.renderNpcs(localPlayer, core.npcList.values());
        if (vm.settings.general.radar.showPlayers.value && localPlayer)
            this.radar.renderPlayers(localPlayer, core.playerList.values());
    }
    updateResearch(core, vm, localPlayer) {
        if (vm.settings.research.recoil.enable.value && localPlayer && vm.settings.research.recoil.options)
            this.recoil.update(core.buttonList, localPlayer, vm.settings.research.recoil.options);
    }
    updateSense(core, vm, localPlayer) {
        const itemsFn = vm.settings.general.sense.highlightItems.value
            ? this.sense.updateItems.bind(this.sense)
            : this.sense.resetItems.bind(this.sense);
        const playersFn = vm.settings.general.sense.highlightPlayers.value
            ? this.sense.updatePlayers.bind(this.sense)
            : this.sense.resetPlayers.bind(this.sense);
        if (localPlayer) {
            itemsFn(localPlayer, core.itemList.values(), vm.settings.itemSet);
            playersFn(localPlayer, core.playerList.values());
        }
    }
}
exports.Runner = Runner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVubmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1J1bm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwyQkFBMkI7QUFDM0IseUJBQXlCO0FBRXpCLE1BQWEsTUFBTTtJQUNqQixZQUNtQixTQUFTLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFzQixFQUMvRCxNQUFNLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQ2xDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFDdEMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEVBQ2xDLFFBQVEsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtRQUpoQyxXQUFNLEdBQU4sTUFBTSxDQUF5RDtRQUMvRCxRQUFHLEdBQUgsR0FBRyxDQUErQjtRQUNsQyxVQUFLLEdBQUwsS0FBSyxDQUFpQztRQUN0QyxXQUFNLEdBQU4sTUFBTSxDQUE0QjtRQUNsQyxVQUFLLEdBQUwsS0FBSyxDQUEyQjtJQUFHLENBQUM7SUFFdkQsTUFBTSxDQUFDLE1BQU07UUFDWCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxHQUFHLENBQUMsSUFBbUIsRUFBRSxFQUFvQjtRQUMzQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FB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SUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEUsU0FBUyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUE3RUQsd0JBNkVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJ2xpYic7XHJcbmltcG9ydCAqIGFzIHVpIGZyb20gJ3VpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBSdW5uZXIge1xyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudCxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFwID0gbmV3IGFwcC5mZWF0dXJlcy5NYXAoY2FudmFzKSxcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmFkYXIgPSBuZXcgYXBwLmZlYXR1cmVzLlJhZGFyKGNhbnZhcyksXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlY29pbCA9IG5ldyBhcHAuZmVhdHVyZXMuUmVjb2lsKCksXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlbnNlID0gbmV3IGFwcC5mZWF0dXJlcy5TZW5zZSgpKSB7fVxyXG4gIFxyXG4gIHN0YXRpYyBjcmVhdGUoKSB7XHJcbiAgICBjb25zdCBzb3VyY2UgPSBuZXcgUnVubmVyKCk7XHJcbiAgICBzb3VyY2UuYXR0YWNoKCk7XHJcbiAgICByZXR1cm4gc291cmNlLnJ1bi5iaW5kKHNvdXJjZSk7XHJcbiAgfVxyXG5cclxuICBydW4oY29yZTogYXBwLmNvcmUuQ29yZSwgdm06IHVpLk1haW5WaWV3TW9kZWwpIHtcclxuICAgIGNvbnN0IGxvY2FsUGxheWVyID0gY29yZS5wbGF5ZXJMaXN0LmdldChjb3JlLmxvY2FsUGxheWVyLnZhbHVlKTtcclxuICAgIHRoaXMudXBkYXRlUmVzZWFyY2goY29yZSwgdm0sIGxvY2FsUGxheWVyKTtcclxuICAgIHRoaXMudXBkYXRlU2Vuc2UoY29yZSwgdm0sIGxvY2FsUGxheWVyKTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB0aGlzLnVwZGF0ZShjb3JlLCB2bSwgbG9jYWxQbGF5ZXIpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhdHRhY2goKSB7XHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdkYmxjbGljaycsICgpID0+IHtcclxuICAgICAgKGRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50XHJcbiAgICAgICAgPyBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpXHJcbiAgICAgICAgOiBkb2N1bWVudC5ib2R5LnJlcXVlc3RGdWxsc2NyZWVuKCkpLmNhdGNoKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlKGNvcmU6IGFwcC5jb3JlLkNvcmUsIHZtOiB1aS5NYWluVmlld01vZGVsLCBsb2NhbFBsYXllcj86IGFwcC5jb3JlLlBsYXllcikge1xyXG4gICAgc3dpdGNoICh2bS5zZXR0aW5ncy5nZW5lcmFsLnZpZXdUeXBlLnZhbHVlKSB7XHJcbiAgICAgIGNhc2UgdWkuc2V0dGluZ3MuZ2VuZXJhbC5NYWluVHlwZS5NYXA6XHJcbiAgICAgICAgdGhpcy5tYXAucmVmcmVzaChjb3JlLmxldmVsTmFtZS52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVNYXAoY29yZSwgdm0sIGxvY2FsUGxheWVyKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSB1aS5zZXR0aW5ncy5nZW5lcmFsLk1haW5UeXBlLlJhZGFyOlxyXG4gICAgICAgIHRoaXMucmFkYXIucmVmcmVzaCgpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUmFkYXIoY29yZSwgdm0sIGxvY2FsUGxheWVyKTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSB1cGRhdGVNYXAoY29yZTogYXBwLmNvcmUuQ29yZSwgdm06IHVpLk1haW5WaWV3TW9kZWwsIGxvY2FsUGxheWVyPzogYXBwLmNvcmUuUGxheWVyKSB7XHJcbiAgICBpZiAodm0uc2V0dGluZ3MuZ2VuZXJhbC5tYXAuc2hvd0l0ZW1zLnZhbHVlKVxyXG4gICAgICB0aGlzLm1hcC5yZW5kZXJJdGVtcyhjb3JlLml0ZW1MaXN0LnZhbHVlcygpLCB2bS5zZXR0aW5ncy5pdGVtU2V0KTtcclxuICAgIGlmICh2bS5zZXR0aW5ncy5nZW5lcmFsLm1hcC5zaG93UGxheWVycy52YWx1ZSAmJiBsb2NhbFBsYXllcilcclxuICAgICAgdGhpcy5tYXAucmVuZGVyUGxheWVycyhsb2NhbFBsYXllciwgY29yZS5wbGF5ZXJMaXN0LnZhbHVlcygpKTtcclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSB1cGRhdGVSYWRhcihjb3JlOiBhcHAuY29yZS5Db3JlLCB2bTogdWkuTWFpblZpZXdNb2RlbCwgbG9jYWxQbGF5ZXI/OiBhcHAuY29yZS5QbGF5ZXIpIHtcclxuICAgIGlmICh2bS5zZXR0aW5ncy5nZW5lcmFsLnJhZGFyLnNob3dJdGVtcy52YWx1ZSAmJiBsb2NhbFBsYXllcilcclxuICAgICAgdGhpcy5yYWRhci5yZW5kZXJJdGVtcyhsb2NhbFBsYXllciwgY29yZS5pdGVtTGlzdC52YWx1ZXMoKSwgdm0uc2V0dGluZ3MuaXRlbVNldCk7XHJcbiAgICBpZiAodm0uc2V0dGluZ3MuZ2VuZXJhbC5yYWRhci5zaG93UGxheWVycy52YWx1ZSAmJiBsb2NhbFBsYXllcilcclxuICAgICAgdGhpcy5yYWRhci5yZW5kZXJOcGNzKGxvY2FsUGxheWVyLCBjb3JlLm5wY0xpc3QudmFsdWVzKCkpO1xyXG4gICAgaWYgKHZtLnNldHRpbmdzLmdlbmVyYWwucmFkYXIuc2hvd1BsYXllcnMudmFsdWUgJiYgbG9jYWxQbGF5ZXIpXHJcbiAgICAgIHRoaXMucmFkYXIucmVuZGVyUGxheWVycyhsb2NhbFBsYXllciwgY29yZS5wbGF5ZXJMaXN0LnZhbHVlcygpKTtcclxuICB9XHJcbiAgXHJcbiAgcHJpdmF0ZSB1cGRhdGVSZXNlYXJjaChjb3JlOiBhcHAuY29yZS5Db3JlLCB2bTogdWkuTWFpblZpZXdNb2RlbCwgbG9jYWxQbGF5ZXI/OiBhcHAuY29yZS5QbGF5ZXIpIHtcclxuICAgIGlmICh2bS5zZXR0aW5ncy5yZXNlYXJjaC5yZWNvaWwuZW5hYmxlLnZhbHVlICYmIGxvY2FsUGxheWVyICYmIHZtLnNldHRpbmdzLnJlc2VhcmNoLnJlY29pbC5vcHRpb25zKVxyXG4gICAgICB0aGlzLnJlY29pbC51cGRhdGUoY29yZS5idXR0b25MaXN0LCBsb2NhbFBsYXllciwgdm0uc2V0dGluZ3MucmVzZWFyY2gucmVjb2lsLm9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVTZW5zZShjb3JlOiBhcHAuY29yZS5Db3JlLCB2bTogdWkuTWFpblZpZXdNb2RlbCwgbG9jYWxQbGF5ZXI/OiBhcHAuY29yZS5QbGF5ZXIpIHtcclxuICAgIGNvbnN0IGl0ZW1zRm4gPSB2bS5zZXR0aW5ncy5nZW5lcmFsLnNlbnNlLmhpZ2hsaWdodEl0ZW1zLnZhbHVlXHJcbiAgICAgID8gdGhpcy5zZW5zZS51cGRhdGVJdGVtcy5iaW5kKHRoaXMuc2Vuc2UpXHJcbiAgICAgIDogdGhpcy5zZW5zZS5yZXNldEl0ZW1zLmJpbmQodGhpcy5zZW5zZSk7XHJcbiAgICBjb25zdCBwbGF5ZXJzRm4gPSB2bS5zZXR0aW5ncy5nZW5lcmFsLnNlbnNlLmhpZ2hsaWdodFBsYXllcnMudmFsdWVcclxuICAgICAgPyB0aGlzLnNlbnNlLnVwZGF0ZVBsYXllcnMuYmluZCh0aGlzLnNlbnNlKVxyXG4gICAgICA6IHRoaXMuc2Vuc2UucmVzZXRQbGF5ZXJzLmJpbmQodGhpcy5zZW5zZSk7XHJcbiAgICBpZiAobG9jYWxQbGF5ZXIpIHtcclxuICAgICAgaXRlbXNGbihsb2NhbFBsYXllciwgY29yZS5pdGVtTGlzdC52YWx1ZXMoKSwgdm0uc2V0dGluZ3MuaXRlbVNldCk7XHJcbiAgICAgIHBsYXllcnNGbihsb2NhbFBsYXllciwgY29yZS5wbGF5ZXJMaXN0LnZhbHVlcygpKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19